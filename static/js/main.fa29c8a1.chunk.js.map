{ "version": 3, "sources": ["util/Spotify.js", "Components/SearchBar/SearchBar.js", "Components/Track/Track.js", "Components/TrackList/TrackList.js", "Components/SearchResults/SearchResults.js", "Components/Playlist/Playlist.js", "Components/App/App.js", "serviceWorker.js", "index.js"], "names": ["accessToken", "SearchBar", "props", "state", "term", "search", "bind", "handleTermChange", "this", "onSearch", "event", "setState", "target", "value", "className", "placeholder", "onChange", "onClick", "React", "Component", "Track", "addTrack", "removeTrack", "isRemoval", "onAdd", "track", "onRemove", "name", "artist", "album", "renderAction", "TrackList", "tracks", "map", "key", "id", "SearchResults", "searchResults", "Playlist", "handleNameChange", "e", "onNameChange", "defaultValue", "playlistTracks", "onSave", "Spotify", "getAccessToken", "accessTokenMatch", "window", "location", "href", "match", "expiresInMatch", "expiresIn", "Number", "setTimeout", "history", "pushState", "accessUrl", "fetch", "headers", "Authorization", "then", "response", "json", "jsonResponse", "items", "artists", "uri", "savePlaylist", "trackUris", "userId", "method", "body", "JSON", "stringify", "playlistId", "uris", "App", "playlistName", "updatePlaylistName", "find", "savedTrack", "push", "filter", "currTrack", "trackURIS", "Boolean", "hostname", "ReactDOM", "render", "StrictMode", "document", "getElementById", "navigator", "serviceWorker", "ready", "registration", "unregister", "catch", "error", "console", "message"], "mappings": "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", "file": "static/js/main.fa29c8a1.chunk.js", "sourcesContent": ["\nconst clientID = 'c31c7f011b4644a49b5ff29df3089489';\nconst redirectURI = 'https://abdullahfawzy.github.io/Jamming/';\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        } \n\n        // check for access token\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            // clear prameters, allow us to gete new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        \n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { \n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        })\n        .then(response => response.json())\n        .then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            \n            return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n            }))\n        });\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })                    \n                })\n            });\n        });\n    }\n};\n\nexport default Spotify;", "import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: '',\n        };\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A song, Album, or Artist\" onChange={this.handleTermChange} />\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;", "import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n        if (this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n\nexport default Track;", "import React from 'react';\nimport './TrackList.css';\n\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                        return <Track \n                                    track={track} \n                                    key={track.id} \n                                    onAdd={this.props.onAdd}\n                                    onRemove={this.props.onRemove}\n                                    isRemoval={this.props.isRemoval} />\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default TrackList;", "import React from 'react';\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} \n                           onAdd={this.props.onAdd} \n                           isRemoval={false} />\n            </div>\n        );\n    }\n}\n\nexport default SearchResults;", "import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\nimport { render } from '@testing-library/react';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(e) {\n        this.props.onNameChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue={\"New Playlist\"}\n                        onChange={this.handleNameChange} />\n                <TrackList \n                    tracks={this.props.playlistTracks}\n                    onRemove={this.props.onRemove} \n                    isRemoval={true} />\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;", "import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  \n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let playlistTracks = this.state.playlistTracks.filter(currTrack => currTrack.id !== track.id);\n\n    this.setState({ playlistTracks: playlistTracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackURIS = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIS).then(() => {\n      this.setState({ \n        playlistName: 'New Playlist',\n        playlistTracks: [],\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                            onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n", "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n", "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"], "sourceRoot": "" }