{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","onSearch","useState","term","setTerm","className","placeholder","onChange","e","target","value","onClick","Track","isRemoval","onAdd","onRemove","track","addTrack","removeTrack","name","artist","album","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","userId","method","body","JSON","stringify","playlistId","uris","App","setSearchResults","setPlaylistTracks","setPlaylistName","updatePlaylistName","find","savedTrack","filter","currTrack","trackURIS","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0da1a068.chunk.js","sourcesContent":["const clientID = '0cc84cce66484a93a68952fb88f03487';\nconst redirectURI = 'https://abdallamourad.github.io/Jamming/';\n\nvar accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        // check for access token\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            // clear prameters, allow us to gete new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`\n                }\n            })\n            .then(response => response.json())\n            .then(jsonResponse => {\n                if (!jsonResponse.tracks) {\n                    return [];\n                }\n\n                return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }))\n            });\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }).then(response => response.json()).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            });\n        });\n    }\n};\n\nexport default Spotify;","import React, { useState } from 'react';\nimport './SearchBar.css';\n\nconst SearchBar = ({ onSearch }) => {\n    const [term, setTerm] = useState('')\n\n    const search = () => {\n        onSearch(term);\n    }\n\n    const handleTermChange = e => {\n        setTerm(e.target.value);\n    }\n\n    return (\n        <div className=\"SearchBar\">\n            <input placeholder=\"Enter A song, Album, or Artist\" onChange={handleTermChange} />\n            <button className=\"SearchButton\" onClick={search}>SEARCH</button>\n        </div>\n    );\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nconst Track = ({ isRemoval, onAdd, onRemove, track }) => {\n    const renderAction = () => {\n        if (isRemoval) {\n            return <button className=\"Track-action\" onClick={removeTrack}>-</button>;\n        } else {\n            return <button className=\"Track-action\" onClick={addTrack}>+</button>;\n        }\n    }\n\n    const addTrack = () => {\n        onAdd(track);\n    }\n\n    const removeTrack = () => {\n        onRemove(track);\n    }\n\n    return (\n        <div className=\"Track\">\n            <div className=\"Track-information\">\n                <h3>{track.name}</h3>\n                <p>{track.artist} | {track.album}</p>\n            </div>\n            {renderAction()}\n        </div>\n    );\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nconst TrackList = ({ tracks, onAdd, onRemove, isRemoval }) => {\n    return (\n        <div className=\"TrackList\">\n            {\n                tracks.map(track => \n                    <Track \n                        track={track} \n                        key={track.id} \n                        onAdd={onAdd}\n                        onRemove={onRemove}\n                        isRemoval={isRemoval} \n                    />\n                )\n            }\n        </div>\n    );\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nconst SearchResults = ({ searchResults, onAdd }) => {\n    return (\n        <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList \n                tracks={searchResults}\n                onAdd={onAdd}\n                isRemoval={false}\n            />\n        </div>\n    );\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nconst Playlist = ({ onNameChange, playlistName, playlistTracks, onRemove, onSave }) => {\n    const handleNameChange = e => {\n        onNameChange(e.target.value);\n    }\n\n    return (\n        <div className=\"Playlist\">\n            <input \n                value={playlistName}\n                onChange={handleNameChange}\n            />\n            <TrackList \n                tracks={playlistTracks}\n                onRemove={onRemove}\n                isRemoval={true}\n            />\n            <button className=\"Playlist-save\" onClick={onSave}>SAVE TO SPOTIFY</button>\n        </div>\n    );\n}\n\nexport default Playlist;","import React, { useState } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nconst App = () => {\n  const [searchResults, setSearchResults] = useState([])\n  const [playlistTracks, setPlaylistTracks] = useState([])\n  const [playlistName, setPlaylistName] = useState('New Playlist')\n    \n  const addTrack = track => {\n    let tracks = playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    setPlaylistTracks([...tracks, track]);\n  }\n\n  const removeTrack = track => {\n    let playlistTracks = playlistTracks.filter(currTrack => currTrack.id !== track.id);\n\n    setPlaylistTracks(playlistTracks);\n  }\n\n  const updatePlaylistName = name => {\n    setPlaylistName(name);\n  }\n\n  const savePlaylist = () => {\n    const trackURIS = playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(playlistName, trackURIS).then(() => {\n      updatePlaylistName('New Playlist');\n      setPlaylistTracks([]);\n    });\n  }\n\n  const search = term => {\n    Spotify.search(term).then(searchResults => {\n      setSearchResults(searchResults);\n    });\n  }\n\n  return (\n    <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={search} />\n        <div className=\"App-playlist\">\n          <SearchResults \n            searchResults={searchResults}\n            onAdd={addTrack} \n          />\n          <Playlist \n            playlistName={playlistName}\n            playlistTracks={playlistTracks}\n            onRemove={removeTrack}\n            onNameChange={updatePlaylistName}\n            onSave={savePlaylist} \n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}