{"version":3,"sources":["Common/elements/containers.js","Components/SearchBar/SearchBar-style.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults-style.js","Components/TrackList/TrackList-style.js","Components/Track/Track-style.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist-style.js","util/Spotify.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Flex","styled","div","VFlex","CenterVFlex","StyledSearchBar","SearchButton","button","SearchBar","onSearch","useState","term","setTerm","placeholder","onChange","e","target","value","onClick","StyledSearchResults","StyledTrackList","StyledTrack","TrackAction","TrackInfromation","Track","isRemoval","onAdd","onRemove","track","addTrack","removeTrack","name","artist","album","TrackList","tracks","map","key","id","SearchResults","searchResults","accessToken","StyledPlaylist","PlaylistSaveBtn","Playlist","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","userId","method","body","JSON","stringify","playlistId","uris","App","setSearchResults","setPlaylistTracks","setPlaylistName","updatePlaylistName","className","find","savedTrack","filter","currTrack","trackURIS","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab2b9e38.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Flex = styled.div`\n    display: flex;\n`\n\nexport const VFlex = styled(Flex)`\n    flex-direction: column;\n`\n\nexport const CenterFlex = styled(Flex)`\n    justify-content: center;\n`\n\nexport const CenterVFlex = styled(VFlex)`\n    align-items: center;\n`","import styled from 'styled-components';\nimport { CenterVFlex } from '../../Common/elements/containers';\n\nexport const StyledSearchBar = styled(CenterVFlex)`\n  padding-top: 6.94rem;\n  margin-bottom: 6.33rem;\n\n  input {\n    width: 287px;\n    padding: .88rem 0;\n    border: 1px solid #fff;\n    border-radius: 3px;\n    margin-bottom: 2.22rem;\n    color: #010c3f;\n    text-align: center;\n    font-size: 1rem;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`\n\nexport const SearchButton = styled.button`\n  cursor: pointer;\n  width: 8.11rem;\n  padding: .77rem 0;\n  border-radius: 54px;\n  background-color: #010c3f;\n  text-align: center;\n  font-size: .833rem;\n  transition: background-color .25s;\n  border: 0px;\n  color: #fff;\n  font-weight: 500;\n\n  &:hover {\n    background-color: rgba(108, 65, 233, .7);\n  }\n`","import React, { useState } from 'react';\nimport { StyledSearchBar, SearchButton } from './SearchBar-style';\n\nconst SearchBar = ({ onSearch }) => {\n    const [term, setTerm] = useState('')\n\n    const search = () => {\n        onSearch(term);\n    }\n\n    const handleTermChange = e => {\n        setTerm(e.target.value);\n    }\n\n    return (\n        <StyledSearchBar>\n            <input placeholder=\"Enter A song, Album, or Artist\" onChange={handleTermChange} />\n            <SearchButton onClick={search}>SEARCH</SearchButton>\n        </StyledSearchBar>\n    );\n}\n\nexport default SearchBar;","import styled from 'styled-components';\n\nexport const StyledSearchResults = styled.div`\n  width: 50%;\n  height: 950px;\n  overflow-y: scroll;\n  padding: .88rem;\n  background-color: rgba(1, 12, 63, 0.7);\n  box-shadow: 0 4px 2px 2px #000000;\n\n  @media (max-width: 1020px) {\n    width: 90%;\n    margin-bottom: 2rem;\n  }\n`","import styled from 'styled-components'\n\nexport const StyledTrackList = styled.div`\n  width: 100%;\n`","import styled from 'styled-components';\nimport { Flex, VFlex } from '../../Common/elements/containers';\n\nexport const StyledTrack = styled(Flex)`\n    align-items: center;\n    border-bottom: 1px solid rgba(256, 256, 256, 0.8);\n`\n\nexport const TrackAction = styled.button`\n    cursor: pointer;\n    padding: .5rem;\n    font-size: 1.05rem;\n    transition: color .25s;\n    border: 0px;\n    background-color: rgba(0, 0, 0, 0);\n    color: #fff;\n\n    &:hover {\n        color: rgba(265, 265, 265, .5);\n    }\n`\n\nexport const TrackInfromation = styled(VFlex)`\n    flex-grow: 1;\n    justify-content: center;\n    height: auto;\n\n    h3 {\n        margin-bottom: .22rem;\n    }\n    p {\n        font-size: .83rem;\n        font-weight: 300;\n        color: rgba(256, 256, 256, 0.8);\n    }\n`","import React from 'react';\nimport { StyledTrack, TrackAction, TrackInfromation } from './Track-style';\n\nconst Track = ({ isRemoval, onAdd, onRemove, track }) => {\n    const renderAction = () => {\n        if (isRemoval) {\n            return <TrackAction onClick={removeTrack}>-</TrackAction>;\n        } else {\n            return <TrackAction onClick={addTrack}>+</TrackAction>;\n        }\n    }\n\n    const addTrack = () => {\n        onAdd(track);\n    }\n\n    const removeTrack = () => {\n        onRemove(track);\n    }\n\n    return (\n        <StyledTrack>\n            <TrackInfromation>\n                <h3>{track.name}</h3>\n                <p>{track.artist} | {track.album}</p>\n            </TrackInfromation>\n            {renderAction()}\n        </StyledTrack>\n    );\n}\n\nexport default Track;","import React from 'react';\nimport { StyledTrackList } from './TrackList-style'\nimport Track from '../Track/Track';\n\nconst TrackList = ({ tracks, onAdd, onRemove, isRemoval }) => {\n    return (\n        <StyledTrackList>\n            {\n                tracks.map(track => \n                    <Track \n                        track={track} \n                        key={track.id} \n                        onAdd={onAdd}\n                        onRemove={onRemove}\n                        isRemoval={isRemoval} \n                    />\n                )\n            }\n        </StyledTrackList>\n    );\n}\n\nexport default TrackList;","import React from 'react';\nimport { StyledSearchResults } from './SearchResults-style';\nimport TrackList from '../TrackList/TrackList';\n\nconst SearchResults = ({ searchResults, onAdd }) => {\n    return (\n        <StyledSearchResults>\n            <h2>Results</h2>\n            <TrackList \n                tracks={searchResults}\n                onAdd={onAdd}\n                isRemoval={false}\n            />\n        </StyledSearchResults>\n    );\n}\n\nexport default SearchResults;","import styled from 'styled-components';\nimport { CenterVFlex } from '../../Common/elements/containers';\n\nexport const StyledPlaylist = styled(CenterVFlex)`\n  overflow-y: scroll;\n  width: 37%;\n  max-height: 950px;\n  padding: 2.27rem 1.16rem;\n  background-color: rgba(1, 12, 63, 0.7);\n  box-shadow: 0 4px 2px 2px #000000;\n\n  input {\n    width: 100%;\n    border: 0;\n    outline: 0;\n    background: transparent;\n    border-bottom: 1px solid #6f6f6f;\n    font-family: 'Poppins', sans-serif;\n    font-size: 1.55rem;\n    color: #fff;\n  }\n  @media (max-width: 1020px) {\n    width: 90%;\n  }\n`\n\nexport const PlaylistSaveBtn = styled.button`\n  cursor: pointer;\n  width: 10rem;\n  padding: .77rem 0;\n  border-radius: 54px;\n  border-width: 0px;\n  margin-top: 1.27rem;\n  background-color: #6c41ec;\n  text-align: center;\n  font-size: .83rem;\n  transition: background-color .25s;\n  color: #fff;\n  font-weight: 500;\n\n  &:hover {\n    background-color: rgba(108, 65, 233, .7);\n  }\n`  \n","const clientID = '0cc84cce66484a93a68952fb88f03487';\nconst redirectURI = 'https://abdallamourad.github.io/Jamming/';\n\nvar accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        // check for access token\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            // clear prameters, allow us to gete new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`\n                }\n            })\n            .then(response => response.json())\n            .then(jsonResponse => {\n                if (!jsonResponse.tracks) {\n                    return [];\n                }\n\n                return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }))\n            });\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }).then(response => response.json()).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            });\n        });\n    }\n};\n\nexport default Spotify;","import React from 'react';\nimport { StyledPlaylist, PlaylistSaveBtn } from './Playlist-style';\nimport TrackList from '../TrackList/TrackList';\n\nconst Playlist = ({ onNameChange, playlistName, playlistTracks, onRemove, onSave }) => {\n    const handleNameChange = e => {\n        onNameChange(e.target.value);\n    }\n\n    return (\n        <StyledPlaylist>\n            <input \n                value={playlistName}\n                onChange={handleNameChange}\n            />\n            <TrackList \n                tracks={playlistTracks}\n                onRemove={onRemove}\n                isRemoval={true}\n            />\n            <PlaylistSaveBtn onClick={onSave}>SAVE TO SPOTIFY</PlaylistSaveBtn>\n        </StyledPlaylist>\n    );\n}\n\nexport default Playlist;","import React, { useState } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nconst App = () => {\n  const [searchResults, setSearchResults] = useState([])\n  const [playlistTracks, setPlaylistTracks] = useState([])\n  const [playlistName, setPlaylistName] = useState('New Playlist')\n    \n  const addTrack = track => {\n    let tracks = playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    setPlaylistTracks([...tracks, track]);\n  }\n\n  const removeTrack = track => {\n    let tracks = playlistTracks.filter(currTrack => currTrack.id !== track.id);\n\n    setPlaylistTracks(tracks);\n  }\n\n  const updatePlaylistName = name => {\n    setPlaylistName(name);\n  }\n\n  const savePlaylist = () => {\n    const trackURIS = playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(playlistName, trackURIS).then(() => {\n      updatePlaylistName('New Playlist');\n      setPlaylistTracks([]);\n    });\n  }\n\n  const search = term => {\n    Spotify.search(term).then(searchResults => {\n      setSearchResults(searchResults);\n    });\n  }\n\n  return (\n    <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={search} />\n        <div className=\"App-playlist\">\n          <SearchResults \n            searchResults={searchResults}\n            onAdd={addTrack} \n          />\n          <Playlist \n            playlistName={playlistName}\n            playlistTracks={playlistTracks}\n            onRemove={removeTrack}\n            onNameChange={updatePlaylistName}\n            onSave={savePlaylist} \n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}